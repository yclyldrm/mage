// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pkg/protos/rank.proto

package leaderboard

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LeaderBoardService_Endgame_FullMethodName     = "/LeaderBoardService/Endgame"
	LeaderBoardService_LeaderBoard_FullMethodName = "/LeaderBoardService/LeaderBoard"
)

// LeaderBoardServiceClient is the client API for LeaderBoardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaderBoardServiceClient interface {
	Endgame(ctx context.Context, in *EndgameRequest, opts ...grpc.CallOption) (*EndgameResponse, error)
	LeaderBoard(ctx context.Context, in *LeaderBoardRequest, opts ...grpc.CallOption) (*LeaderBoardResponse, error)
}

type leaderBoardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderBoardServiceClient(cc grpc.ClientConnInterface) LeaderBoardServiceClient {
	return &leaderBoardServiceClient{cc}
}

func (c *leaderBoardServiceClient) Endgame(ctx context.Context, in *EndgameRequest, opts ...grpc.CallOption) (*EndgameResponse, error) {
	out := new(EndgameResponse)
	err := c.cc.Invoke(ctx, LeaderBoardService_Endgame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderBoardServiceClient) LeaderBoard(ctx context.Context, in *LeaderBoardRequest, opts ...grpc.CallOption) (*LeaderBoardResponse, error) {
	out := new(LeaderBoardResponse)
	err := c.cc.Invoke(ctx, LeaderBoardService_LeaderBoard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaderBoardServiceServer is the server API for LeaderBoardService service.
// All implementations must embed UnimplementedLeaderBoardServiceServer
// for forward compatibility
type LeaderBoardServiceServer interface {
	Endgame(context.Context, *EndgameRequest) (*EndgameResponse, error)
	LeaderBoard(context.Context, *LeaderBoardRequest) (*LeaderBoardResponse, error)
	mustEmbedUnimplementedLeaderBoardServiceServer()
}

// UnimplementedLeaderBoardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLeaderBoardServiceServer struct {
}

func (UnimplementedLeaderBoardServiceServer) Endgame(context.Context, *EndgameRequest) (*EndgameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Endgame not implemented")
}
func (UnimplementedLeaderBoardServiceServer) LeaderBoard(context.Context, *LeaderBoardRequest) (*LeaderBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaderBoard not implemented")
}
func (UnimplementedLeaderBoardServiceServer) mustEmbedUnimplementedLeaderBoardServiceServer() {}

// UnsafeLeaderBoardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaderBoardServiceServer will
// result in compilation errors.
type UnsafeLeaderBoardServiceServer interface {
	mustEmbedUnimplementedLeaderBoardServiceServer()
}

func RegisterLeaderBoardServiceServer(s grpc.ServiceRegistrar, srv LeaderBoardServiceServer) {
	s.RegisterService(&LeaderBoardService_ServiceDesc, srv)
}

func _LeaderBoardService_Endgame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndgameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderBoardServiceServer).Endgame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaderBoardService_Endgame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderBoardServiceServer).Endgame(ctx, req.(*EndgameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderBoardService_LeaderBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderBoardServiceServer).LeaderBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaderBoardService_LeaderBoard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderBoardServiceServer).LeaderBoard(ctx, req.(*LeaderBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaderBoardService_ServiceDesc is the grpc.ServiceDesc for LeaderBoardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaderBoardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LeaderBoardService",
	HandlerType: (*LeaderBoardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Endgame",
			Handler:    _LeaderBoardService_Endgame_Handler,
		},
		{
			MethodName: "LeaderBoard",
			Handler:    _LeaderBoardService_LeaderBoard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/protos/rank.proto",
}
